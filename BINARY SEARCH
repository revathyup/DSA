//WE BASICALLY NARROW DOWN CHOICES.FOR EG REDUCE A SEARCH FROM 1 TO 100 IN 2 HALFS OR SMALLER SO THAT CHANCES ARE HIGH AND WE CAN ELIMINATE UNWANTED DATA
//ITS BEST IF THE ELEMENTS IS IN SORTED ORDER// OTHERWISE WE HAVE TO LOOK INDIVIDUALLY IE O(n)

int binarysearch(arr,target) {
L,R = 0,len(arr)-1

while L<=R {
mid= (L+R)//2

if target>arr[mid]
L= mid+1
else if target<arr[mid]
R=mid-1
else
return mid
}
return -1
}

BASICALLY time complexity or THE WORST CASE EXECUTION TIME IS O(LOG n).
memory complexity is O(1) because we are not allocating any memory lile arrays. we just used some pointers

///// iterative approach ////
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1;

        while (l <= r) {
            int m = l + ((r - l) / 2);
            if (nums[m] > target) {
                r = m - 1;
            } else if (nums[m] < target) {
                l = m + 1;
            } else {
                return m;
            }
        }
        return -1;
    }
};

//// recursive approach ///
class Solution {
public:
    int binary_search(int l, int r, vector<int>& nums, int target){
        if (l > r) return -1;
        int m = l + (r - l) / 2;
        
        if (nums[m] == target) return m;
        return ((nums[m] < target) ? 
                binary_search(m + 1, r, nums, target) : 
                binary_search(l, m - 1, nums, target));
    }

    int search(vector<int>& nums, int target) {
        return binary_search(0, nums.size() - 1, nums, target);
    }
};
